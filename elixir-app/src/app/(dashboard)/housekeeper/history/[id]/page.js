// src/app/(dashboard)/housekeeper/history/[id]/page.js
"use client";

import { useEffect, useMemo, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import ModalWrapper from "@/components/modal/ModalWrapper";

export default function HKHistoryDetailModalPage() {
  const { id } = useParams();
  const router = useRouter();
  const sp = useSearchParams();

  const type = (sp.get("type") || "transaction").toLowerCase(); // transaction | request_transaction
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");

  const title = useMemo(
    () =>
      type === "request_transaction"
        ? "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
        : "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á",
    [type]
  );

  useEffect(() => {
    const load = async () => {
      try {
        setLoading(true);
        setErr("");
        const q = type ? `?type=${encodeURIComponent(type)}` : "";
        const res = await fetch(`/api/transactions/${id}${q}`, {
          cache: "no-store",
        });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        setData(json);
      } catch (e) {
        setErr(e.message || "fetch_error");
      } finally {
        setLoading(false);
      }
    };
    if (id) load();
  }, [id, type]);

  // ‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå Esc
  useEffect(() => {
    const onKey = (e) => e.key === "Escape" && router.back();
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [router]);

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏≤‡∏Å API
  const lines = data?.lines || data?.items || data?.details || data?.Rows || [];

  return (
    <ModalWrapper
      open
      title={`${title} (#${id})`}
      onClose={() => router.back()}
      // ‡πÉ‡∏™‡πà prop ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô size="lg" ‡∏´‡∏£‡∏∑‡∏≠ className
    >
      {loading ? (
        <div className="text-gray-400">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      ) : err ? (
        <div className="text-red-500">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {err}</div>
      ) : !data ? (
        <div className="text-gray-400">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
      ) : (
        <div className="space-y-5">
          {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
          <section className="grid md:grid-cols-2 gap-3">
            <InfoRow
              label="‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤"
              value={
                data.datetime
                  ? new Date(data.datetime).toLocaleString("th-TH", {
                      second: "2-digit",
                      minute: "2-digit",
                      hour: "2-digit",
                      day: "numeric",
                      month: "long",
                      year: "numeric",
                    })
                  : "-"
              }
            />
            <InfoRow label="‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏≥" value={data.actor || "-"} />
            <InfoRow
              label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"
              value={
                data.type === "request_transaction"
                  ? "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
                  : "‡∏Ñ‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á"
              }
            />
            <InfoRow label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏" value={data.note || "-"} />
          </section>

          {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î */}
          <section className="space-y-2">
            <h3 className="font-semibold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
            {Array.isArray(lines) && lines.length > 0 ? (
              <div className="overflow-y-auto max-h-[250px]">
                {type === "request_transaction" ? (
                  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á request_transaction
                  <table className="min-w-full text-sm">
                    <thead className="bg-gray-50 text-gray-600 sticky top-0">
                      <tr>
                        <Th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</Th>
                        <Th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</Th>
                      </tr>
                    </thead>
                    <tbody>
                      {lines.map((r, idx) => (
                        <tr
                          key={r.RT_No || idx}
                          className="border-t hover:bg-gray-50"
                        >
                          <Td>
                            {r.RT_DateTime
                              ? new Date(r.RT_DateTime).toLocaleString(
                                  "th-TH",
                                  {
                                    second: "2-digit",
                                    minute: "2-digit",
                                    hour: "2-digit",
                                    day: "numeric",
                                    month: "long",
                                    year: "numeric",
                                  }
                                )
                              : "-"}
                          </Td>
                          <Td>{r.RT_Note ?? "-"}</Td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  // üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á transaction_detail
                  <table className="min-w-full text-sm">
                    <thead className="bg-gray-50 text-gray-600 sticky top-0">
                      <tr>
                        <Th>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Th>
                        {data.note === "‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á" && <Th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å</Th>}
                        {data.note === "‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á" && <Th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô</Th>}
                        <Th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)</Th>
                      </tr>
                    </thead>
                    <tbody>
                      {lines.map((r, idx) => (
                        <tr
                          key={r.TD_Id || idx}
                          className="border-t hover:bg-gray-50"
                        >
                          <Td>{r.I_Name ?? "-"}</Td>
                          <Td>{r.TD_Amount_Changed ?? "-"}</Td>
                          <Td>{r.TD_Total_Left ?? "-"}</Td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                )}
              </div>
            ) : (
              <div className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î</div>
            )}
          </section>

          <div className="flex justify-end gap-3 mt-4">
            <button
              onClick={() => router.back()}
              type="button"
              className="px-3 py-1.5 rounded-lg text-sm text-gray-600 hover:bg-gray-100 cursor-pointer"
            >
              ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            </button>
          </div>
        </div>
      )}
    </ModalWrapper>
  );
}

function InfoRow({ label, value }) {
  return (
    <div className="space-y-1">
      <div className="text-xs text-gray-500">{label}</div>
      <div className="font-medium">{value ?? "-"}</div>
    </div>
  );
}

function Th({ children }) {
  return <th className="px-3 py-2">{children}</th>;
}
function Td({ children }) {
  return <td className="px-3 py-2 text-center">{children}</td>;
}
