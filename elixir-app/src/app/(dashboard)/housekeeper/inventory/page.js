// src/app/(dashboard)/housekeeper/inventory/page.js
"use client";

import { useEffect, useRef, useState, useCallback } from "react";
import { useRouter } from "next/navigation";
import { useReactToPrint } from "react-to-print";

export default function HKInventoryPage() {
  const router = useRouter();
  const [q, setQ] = useState("");
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(false);
  const [printing, setPrinting] = useState(false);
  const [printRows, setPrintRows] = useState([]);

  // ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å request ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡πà‡∏≠
  const abortRef = useRef(null);

  const printRef = useRef(null);

  // ‚úÖ react-to-print (v3+)
  const handleReactToPrint = useReactToPrint({
    contentRef: printRef,
    documentTitle: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    onAfterPrint: () => setPrinting(false),
    removeAfterPrint: true,
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Å‡πà‡∏≤)
  const fetchData = useCallback(async (keyword) => {
    try {
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å request ‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (abortRef.current) abortRef.current.abort();
      const controller = new AbortController();
      abortRef.current = controller;

      setLoading(true);

      const u = new URL("/api/items", window.location.origin);
      if (keyword) u.searchParams.set("q", keyword);

      const res = await fetch(u.toString(), {
        cache: "no-store",
        signal: controller.signal,
      });
      const data = await res.json();
      setRows(Array.isArray(data) ? data : []);
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô AbortError ‡πÉ‡∏´‡πâ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÑ‡∏ß‡πâ
      if (e?.name !== "AbortError") {
        console.error("fetch items failed", e);
        setRows([]);
      }
    } finally {
      setLoading(false);
    }
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
  useEffect(() => {
    fetchData("");
  }, []);

  // ‚å®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (debounce 300ms)
  useEffect(() => {
    const t = setTimeout(() => {
      fetchData(q.trim());
    }, 300);
    return () => clearTimeout(t);
  }, [q, fetchData]);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå
  const printAll = useCallback(async () => {
    try {
      setPrinting(true);
      const res = await fetch("/api/items", { cache: "no-store" });
      const all = await res.json();
      setPrintRows(Array.isArray(all) ? all : []);
      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
      setTimeout(() => handleReactToPrint(), 100);
    } catch (e) {
      console.error("print failed", e);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ");
      setPrinting(false);
    }
  }, [handleReactToPrint]);

  const formatNow = () =>
    new Date().toLocaleString("th-TH", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-[var(--color-primary)]">
          ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </h1>
        <div className="flex gap-2">
          {/* ‚ûï ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á */}
          <button
            onClick={() => router.push("/housekeeper/inventory/add")}
            className="rounded-md border px-3 py-2 text-white text-sm bg-green-600 hover:bg-green-700 cursor-pointer transition"
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á
          </button>

          {/* ‚úèÔ∏è ‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏à‡∏∞‡∏ó‡∏≥‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á) */}
          <button
            onClick={() => router.push("/housekeeper/inventory/edit")}
            className="rounded-md px-3 py-2 text-black text-sm bg-yellow-500 hover:bg-yellow-600 cursor-pointer transition"
          >
            ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </button>

          {/* üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
          <button
            onClick={printAll}
            disabled={printing}
            className="rounded-md border px-3 py-2 text-white text-sm bg-[var(--color-primary)] hover:bg-[var(--color-primary-dark)] disabled:opacity-50 cursor-pointer transition"
          >
            {printing ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå..." : "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}
          </button>
        </div>
      </div>

      {/* Search */}
      <div className="flex gap-2">
        <input
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á"
          className="w-full rounded-md border border-gray-300 bg-white px-3 py-2 placeholder:text-gray-400 focus:outline-none focus:border-[--color-primary] focus:ring-1 focus:ring-[--color-primary]"
        />
      </div>

      {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ */}
      <div className="overflow-y-auto max-h-[600px] pr-[10px]">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-50 text-gray-600 sticky top-0">
            <tr>
              {/* <th className="text-left px-4 py-2">‡∏£‡∏´‡∏±‡∏™</th> */}
              <th className="text-left px-4 py-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
              <th className="text-right px-4 py-2">‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.I_Id} className="border-t">
                {/* <td className="px-4 py-2">{r.I_Id}</td> */}
                <td className="px-4 py-2">{r.I_Name}</td>
                <td className="px-4 py-2 text-right">{r.I_Quantity}</td>
              </tr>
            ))}
            {!rows.length && (
              <tr>
                <td className="px-4 py-6 text-center text-gray-500" colSpan={3}>
                  {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* üñ®Ô∏è ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå */}
      <div style={{ position: "absolute", left: -9999, top: 0 }}>
        <div ref={printRef} className="p-6">
          <style>{`
            @media print {
              @page { size: A4 portrait; margin: 12mm; }
              body { 
                font-family: TH Sarabun New, sans-serif;
              }
              table { width: 100%; border-collapse: collapse; font-size: 20px; }
              th, td { border: 1px solid #e5e7eb; padding: 6px 8px; font-size: 20px; }
              thead th { background: #f9fafb; text-align: left; font-size: 20px; }
              tfoot td { border: none; padding-top: 8px; font-size: 20px; color: #6b7280; }
            }
          `}</style>

          <h2 className="text-3xl font-semibold mb-1">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
          <div className="text-2xl text-gray-500 mb-3">
            ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {formatNow()}
          </div>

          <table>
            <thead>
              <tr>
                {/* <th style={{ width: 100, textAlign: "left" }}>‡∏£‡∏´‡∏±‡∏™</th> */}
                <th style={{ textAlign: "left" }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</th>
                <th style={{ width: 120, textAlign: "center" }}>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡∏ä‡∏¥‡πâ‡∏ô)</th>
              </tr>
            </thead>
            <tbody>
              {printRows.length > 0 ? (
                printRows.map((r) => (
                  <tr key={`print-${r.I_Id}`}>
                    {/* <td>{safe(r.I_Id)}</td> */}
                    <td>{safe(r.I_Name)}</td>
                    <td style={{ textAlign: "center" }}>
                      _________
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td
                    colSpan={3}
                    style={{
                      textAlign: "center",
                      color: "#6b7280",
                      padding: 12,
                    }}
                  >
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </td>
                </tr>
              )}
            </tbody>
            <tfoot>
              <tr>
                <td
                  colSpan={3}
                  style={{
                    border: "none",
                    paddingTop: 8,
                    fontSize: 20,
                    color: "#6b7280",
                  }}
                >
                  ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {printRows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  );
}

// escape HTML ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function safe(v) {
  if (v === null || v === undefined) return "";
  return String(v)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}
