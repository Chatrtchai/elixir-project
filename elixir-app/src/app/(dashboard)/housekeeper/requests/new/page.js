// src/app/(dashboard)/housekeeper/requests/new/page.js

"use client";
import { useEffect, useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import ModalWrapper from "@/components/modal/ModalWrapper";

export default function NewHKRequestModal() {
  const router = useRouter();
  const [items, setItems] = useState([]);
  const [lines, setLines] = useState([]); // [{ itemId: "", amount: "" }]
  const [heads, setHeads] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
  const [headUsername, setHeadUsername] = useState(""); // ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [err, setErr] = useState("");

  const canSubmit = useMemo(() => {
    if (!headUsername) return false; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤
    if (lines.length === 0) return false; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    // ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô > 0
    return lines.every(
      (l) => l.itemId && l.itemId !== "" && Number(l.amount) > 0
    );
  }, [headUsername, lines]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Item
  useEffect(() => {
    (async () => {
      try {
        const [itemRes, headRes] = await Promise.all([
          fetch("/api/items", { cache: "no-store" }),
          fetch("/api/users?role=head", { cache: "no-store" }),
        ]);
        const [itemData, headData] = await Promise.all([
          itemRes.json(),
          headRes.json(),
        ]);
        setItems(Array.isArray(itemData) ? itemData : []);
        setHeads(Array.isArray(headData) ? headData : []);
      } catch {
        setItems([]);
        setHeads([]);
      }
    })();
  }, []);

  const addLine = () =>
    setLines((prev) => [...prev, { itemId: "", amount: "" }]);
  const removeLine = (i) =>
    setLines((prev) => prev.filter((_, idx) => idx !== i));

  const save = async (e) => {
    e.preventDefault();
    setErr("");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
    if (!headUsername) return setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö");

    for (const [idx, l] of lines.entries()) {
      if (!l.itemId) return setErr(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${idx + 1}`);
      if (l.amount === "" || Number(l.amount) <= 0)
        return setErr(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (> 0) ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${idx + 1}`);
    }

    const payload = {
      headUsername,
      items: lines.map((l) => ({
        itemId: Number(l.itemId),
        amount: Number(l.amount),
      })),
    };

    // NOTE: ‡πÉ‡∏´‡πâ API POST /api/requests ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ (status=Waiting, hkUsername=‡∏à‡∏≤‡∏Å session)
    const res = await fetch("/api/requests", {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(payload),
    });
    const data = await res.json();
    if (!res.ok) return setErr(data?.error || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    router.replace(`/housekeeper/requests?ts=${Date.now()}`);
  };

  // helper: ‡∏´‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á item ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const currentQtyOf = (itemId) => {
    const it = items.find((x) => String(x.I_Id) === String(itemId));
    return typeof it?.I_Quantity === "number" ? it.I_Quantity : "-";
  };

  return (
    <ModalWrapper title="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" width="w-[880px]">
      <form onSubmit={save} className="space-y-4">
        {/* üß© ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ */}
        <div className="grid grid-cols-12 gap-2 items-end">
          <div className="col-span-6">
            <label className="block text-sm font-medium mb-1">
              ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
            </label>
            <select
              value={headUsername}
              onChange={(e) => setHeadUsername(e.target.value)}
              className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[--color-primary]"
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ --</option>
              {heads.map((h) => (
                <option key={h.Username} value={h.Username}>
                  {h.Fullname}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ */}
        {lines.map((l, i) => (
          <div key={i} className="grid grid-cols-12 gap-2 items-end">
            {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ */}
            <div className="col-span-6">
              <label className="block text-sm font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</label>
              <select
                value={l.itemId}
                onChange={(e) => {
                  const cp = [...lines];
                  cp[i].itemId = e.target.value;
                  setLines(cp);
                }}
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[--color-primary]"
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ --</option>
                {items.map((it) => (
                  <option key={it.I_Id} value={it.I_Id}>
                    {it.I_Name}
                  </option>
                ))}
              </select>
            </div>

            {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏ï‡πá‡∏≠‡∏Å) */}
            <div className="col-span-2">
              <label className="block text-sm font-medium mb-1 text-center">
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              </label>
              <input
                value={currentQtyOf(l.itemId)}
                readOnly
                className="w-full rounded-md border border-gray-200 bg-gray-100 px-3 py-2 text-center"
              />
            </div>

            {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° */}
            <div className="col-span-3">
              <label className="block text-sm font-medium mb-1 text-center">
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°
              </label>
              <input
                type="number"
                min="1"
                inputMode="numeric"
                value={l.amount}
                onChange={(e) => {
                  const cp = [...lines];
                  cp[i].amount = e.target.value;
                  setLines(cp);
                }}
                className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-1 focus:ring-[--color-primary] text-center"
              />
            </div>

            {/* ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß */}
            <div className="col-span-1">
              <button
                type="button"
                onClick={() => removeLine(i)}
                className="w-full rounded-md px-3 py-2 text-white bg-red-500 hover:bg-red-600 cursor-pointer text-center"
              >
                ‡∏•‡∏ö
              </button>
            </div>
          </div>
        ))}

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° */}
        <div className="flex justify-between">
          <button
            type="button"
            onClick={addLine}
            className="rounded-md border px-3 py-2 hover:bg-gray-50 cursor-pointer"
          >
            + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>

          <div className="flex justify-end gap-3">
            <button
              type="submit"
              disabled={!canSubmit} // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
              className={`rounded-md px-4 py-2 cursor-pointer text-white
                ${
                  canSubmit
                    ? "bg-[var(--color-primary)] hover:bg-[var(--color-primary-dark)]"
                    : "bg-gray-300 cursor-not-allowed"
                }`}
              aria-disabled={!canSubmit}
              title={
                !canSubmit ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (> 0) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß" : ""
              }
            >
              ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠
            </button>
            <button
              onClick={() => router.back()}
              type="button"
              className="px-3 py-1.5 rounded-lg text-sm text-gray-600 hover:bg-gray-100 cursor-pointer"
            >
              ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
            </button>
          </div>
        </div>

        {err && <p className="text-sm text-red-600">{err}</p>}
      </form>
    </ModalWrapper>
  );
}
